// DroidMate, an automated execution generator for Android apps.
// Copyright (C) 2012-2016 Konrad Jamrozik
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// email: jamrozik@st.cs.uni-saarland.de
// web: www.droidmate.org
import com.konradjamrozik.IterableExtensions
import org.droidmate.buildsrc.BuildKt

// !!! DUPLICATION WARNING !!!
// These values have to be the same as the ones used in the gradle scripts of the referenced "apk fixtures" project.
File apkFixturesProjectDir = file("${project.rootDir}/../apk_fixtures_src")
assert apkFixturesProjectDir.directory
File apkFixturesDroidmateStagingDir = new File("${apkFixturesProjectDir.path}/build")
String apkFixturesBuildTask = "stageForDroidmate"
// end of DUPLICATION WARNING

ext.apkFixturesDir = new File(
  IterableExtensions.findSingle(sourceSets.test.resources.srcDirs as Set<File>),
  BuildKt.apk_fixtures)
assert apkFixturesDir.directory

task pullApkFixtures(type: Copy, dependsOn: "buildApkFixtures") {

  from fileTree(dir: apkFixturesDroidmateStagingDir, include: "*.apk", exclude: [BuildKt.monitored_apk_fixture_api19_name, BuildKt.monitored_apk_fixture_api23_name])
  into apkFixturesDir
}

/*
 This project sometimes has to fire apk-inliner:run. For that, this project needs to know input and output dirs of apk-inliner,
 which is the reason for evaluation dependence.
 */
evaluationDependsOn(":projects:apk-inliner")
JavaExec inlinerExec = project(":projects:apk-inliner").tasks.run as JavaExec
def inlineMonitoredApkFixture = { JavaExec je, String apkName, String inlinedApkName ->
  group = "build"
  ["main", "classpath", "standardOutput"].each {je."$it" = inlinerExec."$it"}

  File inputApk = new File(apkFixturesDroidmateStagingDir, apkName)
  je.args = [
    BuildKt.apk_inliner_param_input, inputApk.canonicalPath,
    BuildKt.apk_inliner_param_output_dir, apkFixturesDir
  ]

  je.inputs.file inputApk
  je.outputs.file new File(apkFixturesDir as File, inlinedApkName)
}

task inlineMonitoredApkFixture_api19(type: JavaExec, dependsOn: "buildApkFixtures") {JavaExec je ->
  inlineMonitoredApkFixture(je, 
    BuildKt.monitored_apk_fixture_api19_name, 
    BuildKt.monitored_inlined_apk_fixture_api19_name
  )
}

task inlineMonitoredApkFixture_api23(type: JavaExec, dependsOn: "buildApkFixtures") {JavaExec je ->
  inlineMonitoredApkFixture(je, 
    BuildKt.monitored_apk_fixture_api23_name,
    BuildKt.monitored_inlined_apk_fixture_api23_name
  )
}

task buildApkFixtures(type: GradleBuild) {
  buildFile = apkFixturesProjectDir.path + "/build.gradle"
  tasks = [apkFixturesBuildTask]
}

task cleanApkFixtures(dependsOn: "cleanExternalBuild_apkFixtures")

task cleanExternalBuild_apkFixtures(type: GradleBuild) {
  buildFile = apkFixturesProjectDir.path + "/build.gradle"
  tasks = ["clean"]
}