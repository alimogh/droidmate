// DroidMate, an automated execution generator for Android apps.
// Copyright (C) 2012-2016 Konrad Jamrozik
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// email: jamrozik@st.cs.uni-saarland.de
// web: www.droidmate.org

import org.droidmate.buildsrc.BuildKt

apply plugin: 'groovy'
apply from: project(":projects").file("debug.gradle")

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependOnJunit(project)

dependencies {

  compile project(":projects:lib-common")
  compile project(":projects:lib-kotlin")

  compile 'org.codehaus.groovy:groovy-all:2.4.10'

  compile 'ch.qos.logback:logback-classic:1.0.13'
  compile 'ch.qos.logback:logback-core:1.0.13'
  compile 'org.slf4j:slf4j-api:1.7.6'
}

//region Tasks to setup resources necessary for a call to MonitorGeneratorFrontend

// Ensure BuildKt.monitored_apis_txt is available at runtime as a resource. 
processResources.configure { Copy copy ->

  File monitoredApisTxt = project(":projects").file("resources/${BuildKt.monitored_apis_txt}")
  assert monitoredApisTxt.file

  evaluationDependsOn(":projects:monitor-template")
  // !!! DUPLICATION WARNING !!! with the file name and file location of class org.droidmate.monitor.MonitorJavaTemplate
  File monitorJavaTemplateSource = findProject(":projects:monitor-template").sourceSets.main.java.find { it.name == "MonitorJavaTemplate.java" } as File
  assert monitorJavaTemplateSource.file

  copy.from(monitoredApisTxt, monitorJavaTemplateSource).rename(monitorJavaTemplateSource.name, BuildKt.monitor_generator_res_name_monitor_template)
}

//endregion

//region Tasks calling MonitorGeneratorFrontend, outputting generatedMonitor_apiXX
apply plugin: 'application'
mainClassName = "org.droidmate.monitor.MonitorGeneratorFrontend"
JavaExec runTask = tasks.run as JavaExec
def generateMonitor = { JavaExec je, List<String> args, File generatedMonitor ->
  je.group = "build"
  ["main", "classpath", "standardOutput"].each {je."$it" = runTask."$it"}

  je.args = args
  // Output is not muted as we want to see in Gradle build log output of org.droidmate.monitor.MonitorGeneratorFrontend.loadMonitorHookIfAvailableElseNull
  //je.standardOutput = new ByteArrayOutputStream() // Mute the task stdout
  je.outputs.file generatedMonitor

  je.doLast { assert generatedMonitor.file }
}
def generatedMonitor = {int apiLevel -> new File(runTask.workingDir, BuildKt.generated_monitor(apiLevel))}

task generateMonitor_api19(type: JavaExec) {generateMonitor(it as JavaExec, ["api19"], generatedMonitor(19)) }
task generateMonitor_api23(type: JavaExec) {generateMonitor(it as JavaExec, ["api23"], generatedMonitor(23)) }

//endregion

evaluationDependsOn(":projects:monitor-hook")
Jar monitorHookJarTask = findProject(":projects:monitor-hook").jar as Jar

evaluationDependsOn(":projects:lib-common")
Jar libCommonJarTask = findProject(":projects:lib-common").jar as Jar

File monitorApkScaffoldingDir = project(":projects").file("monitor-apk-scaffolding")
assert monitorApkScaffoldingDir.directory


def copyFileWithRename = {File copiedFile, File targetFile ->
  assert targetFile.parentFile.directory
  copy { it.from(copiedFile).into(targetFile.parent).rename { targetFile.name }}
}

def assembleApk = {GradleBuild gradleBuildTask, int apiLevel ->
  File monitorApkScaffoldingBuildGradle = new File(monitorApkScaffoldingDir, "build.gradle")
  assert monitorApkScaffoldingBuildGradle.file
  gradleBuildTask.buildFile = monitorApkScaffoldingBuildGradle
  gradleBuildTask.tasks = ["assembleApi$apiLevel".toString()]
}

def monitorJava = { int apiLevel -> new File(monitorApkScaffoldingDir, "src/api$apiLevel/java/org/droidmate/monitor/Monitor.java") }
File apkScaffoldingOutput = new File(monitorApkScaffoldingDir, "build")
def apkScaffoldingOutputApk = { int apiLevel -> new File(apkScaffoldingOutput, "outputs/apk/monitor-apk-scaffolding-api$apiLevel-release-unsigned.apk") }
def monitorApk = { int apiLevel -> new File(buildDir, "monitor_api${apiLevel}.apk") }

File libsBuilt = new File(monitorApkScaffoldingDir, "libs_built")

def buildMonitorApk = { GradleBuild task, int apiLevel ->

  task.dependsOn([libCommonJarTask, monitorHookJarTask, tasks.getByName("generateMonitor_api$apiLevel")])
  
  task.group = "build"

  task.inputs.files libCommonJarTask
  task.inputs.files monitorHookJarTask
  task.inputs.files tasks.getByName("generateMonitor_api$apiLevel")
  
  File libsApi = new File(monitorApkScaffoldingDir, "libs_api$apiLevel")
  assert libsApi.directory
  task.inputs.files fileTree(dir: libsApi, include: '**')

  task.outputs.file monitorApk(apiLevel)

  task.doFirst {
    delete libsBuilt
    copy {it.from monitorHookJarTask.archivePath into libsBuilt}
    copy {it.from libCommonJarTask.archivePath into libsBuilt}
    copyFileWithRename(generatedMonitor(apiLevel), monitorJava(apiLevel))
    assert monitorJava(apiLevel).file
  }
  
  assembleApk(task, apiLevel)
  
  task.doLast { copyFileWithRename(apkScaffoldingOutputApk(apiLevel), monitorApk(apiLevel)) }
}

task buildMonitorApk_api19(type: GradleBuild) {buildMonitorApk(it as GradleBuild, 19) }
task buildMonitorApk_api23(type: GradleBuild) {buildMonitorApk(it as GradleBuild, 23) }

clean.configure {
  
  delete generatedMonitor(19)
  delete generatedMonitor(23)
  assert generatedMonitor(19).parent ==  generatedMonitor(23).parent
  delete generatedMonitor(19).parent

  delete monitorJava(19)
  delete monitorJava(23)

  delete libsBuilt
  delete apkScaffoldingOutput

  delete monitorApk(19)
  delete monitorApk(23)
}

build.dependsOn "buildMonitorApk_api19", "buildMonitorApk_api23"

// Tests not included because the test shouldn't be run as part of a test suite.
configureTest(project, [''])